diff -ru original/library_fs.js patched/library_fs.js
--- original/library_fs.js	2020-01-18 20:19:32.641009092 -0500
+++ patched/library_fs.js	2020-01-18 21:01:13.691010356 -0500
@@ -1063,10 +1063,13 @@
       var stream = FS.createStream({
         node: node,
         path: FS.getPath(node),  // we want the absolute path to the node
+        id: node.id,
         flags: flags,
+        mode: node.mode,
         seekable: true,
         position: 0,
         stream_ops: node.stream_ops,
+        node_ops: node.node_ops,
         // used by the file family libc calls (fopen, fwrite, ferror, etc.)
         ungotten: [],
         error: false
diff -ru original/library_nodefs.js patched/library_nodefs.js
--- original/library_nodefs.js	2020-01-18 20:19:32.661862612 -0500
+++ patched/library_nodefs.js	2020-01-18 20:31:32.364548922 -0500
@@ -25,6 +25,11 @@
         "{{{ cDefine('O_TRUNC') }}}": flags["O_TRUNC"],
         "{{{ cDefine('O_WRONLY') }}}": flags["O_WRONLY"]
       };
+#if ASSERTIONS
+      // The 0 define must match on both sides, as otherwise we would not
+      // know to add it.
+      assert(NODEFS.flagsForNodeMap["0"] === 0);
+#endif
     },
     bufferFrom: function (arrayBuffer) {
       // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
@@ -78,10 +83,11 @@
     // This maps the integer permission modes from http://linux.die.net/man/3/open
     // to node.js-specific file open permission strings at http://nodejs.org/api/fs.html#fs_fs_open_path_flags_mode_callback
     flagsForNode: function(flags) {
-      flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
-      flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
-      flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
-      flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
+      flags &= ~{{{ cDefine('O_PATH') }}}; // Ignore this flag from musl, otherwise node.js fails to open the file.
+      flags &= ~{{{ cDefine('O_NONBLOCK') }}}; // Ignore this flag from musl, otherwise node.js fails to open the file.
+      flags &= ~{{{ cDefine('O_LARGEFILE') }}}; // Ignore this flag from musl, otherwise node.js fails to open the file.
+      flags &= ~{{{ cDefine('O_CLOEXEC') }}}; // Some applications may pass it; it makes no sense for a single process.
+      flags &= ~{{{ cDefine('O_DIRECTORY') }}}; // Node.js doesn't need this passed in, it errors.
       var newFlags = 0;
       for (var k in NODEFS.flagsForNodeMap) {
         if (flags & k) {
@@ -89,7 +95,6 @@
           flags ^= k;
         }
       }
-
       if (!flags) {
         return newFlags;
       } else {
diff -ru original/library_noderawfs.js patched/library_noderawfs.js
--- original/library_noderawfs.js	2020-01-18 20:19:32.663720131 -0500
+++ patched/library_noderawfs.js	2020-01-18 20:51:55.394153833 -0500
@@ -12,8 +12,12 @@
     '}' +
     'else { throw new Error("NODERAWFS is currently only supported on Node.js environment.") }',
   $NODERAWFS: {
+    lookup: function(parent, child) {
+      return FS.lookupPath(parent.path + '/' + child);
+    },
     lookupPath: function(path) {
-      return { path: path, node: { mode: NODEFS.getMode(path) } };
+      var st = fs.lstatSync(path);
+      return { path: path, id: st.ino, mode: st.mode, node: { mode: st.mode } };
     },
     createStandardStreams: function() {
       FS.streams[0] = { fd: 0, nfd: 0, position: 0, path: '', flags: 0, tty: true, seekable: false };
@@ -35,7 +39,7 @@
     symlink: function() { fs.symlinkSync.apply(void 0, arguments); },
     rename: function() { fs.renameSync.apply(void 0, arguments); },
     rmdir: function() { fs.rmdirSync.apply(void 0, arguments); },
-    readdir: function() { fs.readdirSync.apply(void 0, arguments); },
+    readdir: function() { return ['.', '..'].concat(fs.readdirSync.apply(void 0, arguments)); },
     unlink: function() { fs.unlinkSync.apply(void 0, arguments); },
     readlink: function() { return fs.readlinkSync.apply(void 0, arguments); },
     stat: function() { return fs.statSync.apply(void 0, arguments); },
@@ -51,9 +55,14 @@
       if (typeof flags === "string") {
         flags = VFS.modeStringToFlags(flags)
       }
-      var nfd = fs.openSync(path, NODEFS.flagsForNode(flags), mode);
+      var pathTruncated = path.split('/').map(function(s) { return s.substr(0, 255); }).join('/');
+      var nfd = fs.openSync(pathTruncated, NODEFS.flagsForNode(flags), mode);
+      var st = fs.fstatSync(nfd);
+      if (flags & {{{ cDefine('O_DIRECTORY') }}} && !st.isDirectory()) {
+        throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
+      }
       var fd = suggestFD != null ? suggestFD : FS.nextfd(nfd);
-      var stream = { fd: fd, nfd: nfd, position: 0, path: path, flags: flags, seekable: true };
+      var stream = { fd: fd, nfd: nfd, position: 0, path: path, id: st.ino, flags: flags, mode: st.mode, node_ops: NODERAWFS, seekable: true };
       FS.streams[fd] = stream;
       return stream;
     },
diff -ru original/library_syscall.js patched/library_syscall.js
--- original/library_syscall.js	2020-01-18 20:19:32.688149333 -0500
+++ patched/library_syscall.js	2020-01-18 21:18:54.771284223 -0500
@@ -1042,11 +1042,25 @@
       var id;
       var type;
       var name = stream.getdents[idx];
-      if (name[0] === '.') {
-        id = 1;
+      if (name === '.') {
+        id = stream.id;
         type = 4; // DT_DIR
-      } else {
-        var child = FS.lookupNode(stream.node, name);
+      }
+      else if (name === '..') {
+        id = FS.lookupPath(stream.path, { parent: true }).id;
+        type = 4; // DT_DIR
+      }
+      else {
+        try {
+          var child = FS.lookupNode(stream, name);
+        } catch (e) {
+          if (!(e instanceof FS.ErrnoError) || e.errno !== {{{ cDefine('EACCES') }}}) {
+            throw e;
+          }
+          // Access denied; skip it in the directory listing.
+          idx++;
+          continue;
+        }
         id = child.id;
         type = FS.isChrdev(child.mode) ? 2 :  // DT_CHR, character device.
                FS.isDir(child.mode) ? 4 :     // DT_DIR, directory.
diff -ru original/struct_info.json patched/struct_info.json
--- original/struct_info.json	2020-01-18 20:19:32.774014831 -0500
+++ patched/struct_info.json	2020-01-18 20:40:27.339064837 -0500
@@ -467,6 +467,9 @@
             "F_SETOWN", 
             "O_TRUNC", 
             "O_DIRECTORY",
+            "O_PATH",
+            "O_NONBLOCK",
+            "O_CLOEXEC",
             "F_GETOWN", 
             "F_GETOWN_EX",
             "F_SETFD", 
